import heapq

goal_state = [[1,2,3],[4,5,6],[7,8,0]]

def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_i, goal_j = divmod(value-1, 3)
                distance += abs(goal_i - i) + abs(goal_j - j)
    return distance

def get_neighbors(state):
    moves = []
    i, j = next((r, c) for r in range(3) for c in range(3) if state[r][c] == 0)
    directions = [(-1,0),(1,0),(0,-1),(0,1)]
    for dr, dc in directions:
        r, c = i+dr, j+dc
        if 0 <= r < 3 and 0 <= c < 3:
            new_state = [row[:] for row in state]
            new_state[i][j], new_state[r][c] = new_state[r][c], new_state[i][j]
            moves.append(new_state)
    return moves

def a_star(start):
    heap = [(heuristic(start), 0, start, [])]
    visited = set()
    while heap:
        est, cost, state, path = heapq.heappop(heap)
        if state == goal_state:
            return path + [state]
        state_tuple = tuple(map(tuple, state))
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        for neighbor in get_neighbors(state):
            heapq.heappush(heap, (cost + 1 + heuristic(neighbor), cost + 1, neighbor, path + [state]))

# Example usage
start_state = [[1,2,3],[4,0,6],[7,5,8]]
solution = a_star(start_state)
for step in solution:
    for row in step:
        print(row)
    print()
